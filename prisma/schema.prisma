// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  username      String?     @unique @db.VarChar(30)
  about         String?     @db.Text
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  replies       Reply[]
  communities   Community[]
  PostVote      PostVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Community schema 
model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String
  image_url   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  users       User[]
}

model Post {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  title       String
  body        String
  image_url   String?
  community   Community          @relation(fields: [communityId], references: [id])
  communityId String
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  categories  CategoriesOnPost[]
  upvotes     Int                @default(0)
  downvotes   Int                @default(0)
  votes       PostVote[]
}

model PostVote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  voteType  VoteType
  postId    String
  userId    String
  Post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  replies   Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  parent    Reply?   @relation("ChildOf", fields: [parentId], references: [id])
  parentId  String?
  replies   Reply[]  @relation("ChildOf")
}

model Category {
  id        String             @id @default(cuid())
  name      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  posts     CategoriesOnPost[]
}

model CategoriesOnPost {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

enum Role {
  ADMIN
  USER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
