import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import HomeLayout from "~/components/layout/home";
import { useToast } from "~/components/hooks/ui/use-toast";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const utils = api.useContext();

  const { toast } = useToast();

  const mutate = api.community.createCommunity.useMutation({
    onSuccess: async () => {
      await utils.community.getCommunities.invalidate();
      toast({ title: "Community created", description: "You can now join it" });
    },
    onError: (err) => {
      console.log("err", err);
      toast({
        title: "Error",
        description: err.message,
        variant: "destructive",
      });
    },
  });

  const { data: communities } = api.community.getCommunities.useQuery();

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const name = formData.get("name");
    if (typeof name === "string") {
      mutate.mutate({ name });
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HomeLayout>
        <div className="flex flex-col items-center gap-2">
          <AuthShowcase />
          <form onSubmit={handleSubmit}>
            <input type="text" name="name" />
            <button type="submit" disabled={mutate.isLoading}>
              {" "}
              Create community
            </button>
          </form>
          show all communities (with invalidation)
          <ul>
            {communities?.map((community) => (
              <li key={community.id}>
                <Link href={`/community/${community.id}`}>
                  {community.name}
                </Link>
              </li>
            ))}
          </ul>
        </div>
      </HomeLayout>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
